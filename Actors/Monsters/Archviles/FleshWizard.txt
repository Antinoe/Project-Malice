const MASON_CHECK_RATE			= 32;
const MASON_CHECK_RANGE			= 104;

Class MasonSpawnTable : RandomSpawner
{
    Default
	{
		dropItem "PM_Horrorspawn", 255, 70;
		dropItem "PM_SleepingHorrorspawn1", 255, 6;
		dropItem "PM_SleepingHorrorspawn2", 255, 6;
		dropItem "PM_SleepingHorrorspawn3", 255, 6;
		dropItem "PM_SleepingHorrorspawn4", 255, 6;
		dropItem "PM_HorrorspawnBurster", 255, 2;
		dropItem "PM_FreshHorrorspawn", 255, 6;
		dropItem "Pustule", 255, 3;
	}
}

Class PM_FleshMason : PMGluttonyMonsterBase
{
	Default
	{
		PMMonsterBase.CodexLore
		"Flesh Masons are archdemons residing within Gluttony. These slender abominations are heavily reliant on haemo magic and will make mortals succumb to the belly of the beast.
		There is nothing much to say about it except that it is a bit more tactic with its blood magic, and with its abscence of legs it can dodge fairly easily compared to its predecessors.
		
		We're all blood here. You will be consumed.
		
		Slower than usual due to its mutated torso, but heavier than the Exile. Will spawn runes underneath its target to summon blood blasts. Can also summon fleshy pustules at will.";
		Health 750;
		Radius 20;
		Height 56;
		Mass 500;
		Speed 8;
		PainChance 10;
		//MaxTargetRange 896;
		Species "Archvile";
		DamageFactor "Vile", 0;
		PainChance "Vile", 0;
		Gibhealth 40;
		Obituary "%o succumbed to the Flesh Mason.";
		Tag "Flesh Mason";
		SeeSound "FleshMason/Sight";
		PainSound "FleshMason/Pain";
		DeathSound "FleshMason/Death";
		ActiveSound "FleshMason/Active";
		Bloodtype "PM_NormalBloodBase";
		+NOTARGET
		+QUICKTORETALIATE
		+DONTHARMSPECIES
		+DONTHARMCLASS
		+NOINFIGHTSPECIES
		+MissileMore
		+MISSILEEVENMORE
		TeleFogSourceType "PM_SmallDemonicTeleportFog";
		TeleFogDestType "PM_GluttonyTeleportFog";
		PMMonsterBase.RealHeight 76;
	}

	int summoncooldown;
	int raiseCoolDown;

	array<Actor> toRaise;
	
	override void Tick()
	{
		super.Tick();
		if (summoncooldown > 0) summoncooldown--;
		if(raiseCoolDown > 0) raiseCoolDown--;
	}
	
	override void PostBeginPlay()
    {
		Super.PostBeginPlay();
		tex[0] = TexMan.CheckForTexture("GNSML0",TexMan.Type_Sprite);
		tex[1] = TexMan.CheckForTexture("SPKRA0",TexMan.Type_Sprite);
		tex[2] = TexMan.CheckForTexture("DTPRR0",TexMan.Type_Sprite);
    }
  
    TextureID tex[3];
	
	void Wiz()
	{
		A_SpawnParticleEx("ff0000",tex[0],style: STYLE_Add,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(80, 160),size: frandom(50, 150),xoff: random(-125, 125), yoff: random(-125, 125),velz: frandom(.3, 2),startalphaf: 0.4,fadestepf: -1,startroll: random(-180,180));
		A_SpawnParticleEx("890000",tex[0],style: STYLE_None,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(80, 160),size: frandom(50, 150),xoff: random(-125, 125), yoff: random(-125, 125),velz: frandom(.3, 2),startalphaf: 0.4,fadestepf: -1,startroll: random(-180,180));
		A_SpawnParticleEx("",tex[1],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(1,70),size: frandom(0.2,10),xoff: random(-150, 150),yoff: random(-150,150),zoff: random(-5,5),velx: frandom(-0.6,0.6),vely: frandom(-0.6,0.6),velz: frandom(1,3),startalphaf: 1.0,fadestepf: -1,sizestep: -0.2,startroll: random(-180,180));
	}
	
	void Wiz2()
	{
		A_SpawnParticleEx("ff0000",tex[0],style: STYLE_Add,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(80, 160),size: frandom(50, 150),xoff: random(-65, 65), yoff: random(-65, 65),velz: frandom(.3, 8),startalphaf: 0.4,fadestepf: -1,startroll: random(-180,180));
		A_SpawnParticleEx("ff0000", tex[2], STYLE_Add, SPF_RELATIVE|SPF_ROLL, random(20, 50), random(40,200), xoff: 15, zoff: 60, startalphaf: frandom(.2, .9), sizestep: frandom(0, 1), startroll: random(-180,180), rollvel: frandom(-4, 4));
		A_SpawnParticleEx("",tex[1],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(1,70),size: frandom(0.2,10),xoff: random(-150, 150),yoff: random(-150,150),zoff: random(-5,5),velx: frandom(-0.6,0.6),vely: frandom(-0.6,0.6),velz: frandom(1,8),startalphaf: 1.0,fadestepf: -1,sizestep: -0.2,startroll: random(-180,180));
	}

	void masonAI(statelabel melee = "Melee", statelabel missile = "Missile", int flags = 0) {
		A_Chase(melee, missile, flags);
		A_Wander();
		A_FaceTarget();
		A_SpawnItemEx("RedGroundStain",random(-8,8),random(-8,8),1,frandom(-1,1),frandom(-1,1),0,0,SXF_NOCHECKPOSITION);

		if(raiseCoolDown < 1) {
			BlockThingsIterator corpseSearch = BlockThingsIterator.Create(self, MASON_CHECK_RANGE);

			while(corpseSearch.next()) {
				Actor a = corpseSearch.thing;
				if(a.species == "Zombie" && a.health < 1) {
					toRaise.push(a);
				}
			}
			if(toRaise.size() > 0) {
				if(pmd_monster_behavior_log) console.printf("%s has (%d) zombie(s) to convert.", getClassName(), toRaise.size());
				setStateLabel("MasonHeal");
			}
		}
	}
	void masonRaise() {
		A_StartSound("Exile/Resurrect",CHAN_6);
		for(int i = 0; i < toRaise.size(); ++i) {
			Actor a = toRaise[i];

			masonRaiseEffect(a.pos);
			a.A_SpawnParticleEx("ff0000",tex[0],style: STYLE_Add,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(80, 160),size: frandom(50, 150),xoff: random(-65, 65), yoff: random(-65, 65),velz: frandom(.3, 8),startalphaf: 0.4,fadestepf: -1,startroll: random(-180,180));
			a.A_SpawnParticleEx("ff0000", tex[2], STYLE_Add, SPF_RELATIVE|SPF_ROLL, random(20, 50), random(40,200), xoff: 15, zoff: 60, startalphaf: frandom(.2, .9), sizestep: frandom(0, 1), startroll: random(-180,180), rollvel: frandom(-4, 4));
			a.A_SpawnParticleEx("",tex[1],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(1,70),size: frandom(0.2,10),xoff: random(-150, 150),yoff: random(-150,150),zoff: random(-5,5),velx: frandom(-0.6,0.6),vely: frandom(-0.6,0.6),velz: frandom(1,8),startalphaf: 1.0,fadestepf: -1,sizestep: -0.2,startroll: random(-180,180));

			let s = spawn("MasonSpawnTable", a.pos);
			s.angle = random(1, 8) * 45;
			a.destroy();
			raiseCoolDown = 200;
		}
		toRaise.clear();
	}
	void masonRaiseEffect(vector3 fxPos = (0,0,0)) {
		spawn("PM_ExileRessurectFire", fxPos);
	}
	States
	{
	Spawn:
		LMWZ E 10 PM_Look();
		Loop;
	Look:
		LMWZ F 3
		{
			PM_LookingForPlayer();
			A_Recoil(-0.25);
		}
		LMWZ F 3 A_JumpIfTargetinLOS("Spotted",150,JLOSF_DEADNOJUMP);
		Loop;
	Spotted:
		LMWZ A 0 PM_AlertSound();
	See:
		LMWZ F 2 masonAI("missile", "missile", CHF_DONTMOVE);
		TNT1 A 0
		{
			bSHOOTABLE = true;
			A_SetSpeed(8);
		}
		LMWZ F 0 A_Jump(8,"Dodge","BloodPort");
		LMWZ F 0 A_CheckSight("SeeFind");
		Loop;
	SeeFind:
		LMWZ FFFFFFFFFFFFFFFFFFFFFFFF 1 masonAI("Missile","Missile"/*,CHF_RESURRECT*/);
		LMWZ F 0 A_CheckSight("SeeFind");
		Goto See;
	BloodPort:
		TNT1 A 0
		{
			A_StartSound("Mimic/Pain",CHAN_7);
			A_SetSpeed(30);
			bSHOOTABLE = false;
		}
		LMWZ J 5
		{
		 A_SpawnItemEx("PM_MasonPortGeyser",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		 A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,50),0,0,0,0,SXF_NOCHECKPOSITION);
		 A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,50),0,0,0,0,SXF_NOCHECKPOSITION);
		}
		LMWZ K 5 A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,50),0,0,0,0,SXF_NOCHECKPOSITION);
		LMWZ L 5 A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,40),0,0,0,0,SXF_NOCHECKPOSITION);
		LMWZ MN 5 A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,30),0,0,0,0,SXF_NOCHECKPOSITION);
		LMWZ OP 5;
		TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 A_Wander();
		TNT1 A 0
		{
		 A_SpawnItemEx("PM_MasonPortGeyser",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION);
		 A_StartSound("Mimic/Pain",CHAN_7);
		}
		LMWZ PO 5 A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,50),0,0,0,0,SXF_NOCHECKPOSITION);
		LMWZ M 0 A_StartSound("Exile/Resurrect", CHAN_6);
		LMWZ MN 5 A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,50),0,0,0,0,SXF_NOCHECKPOSITION);
		LMWZ L 5 A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,40),0,0,0,0,SXF_NOCHECKPOSITION);
		LMWZ K 5 A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,30),0,0,0,0,SXF_NOCHECKPOSITION);
		LMWZ J 5 A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,15),0,0,0,0,SXF_NOCHECKPOSITION);
		TNT1 A 0
		{
			A_SetSpeed(8);
			bSHOOTABLE = true;
		}
		Goto See;
	// Heal:
	// 	LMWZ E 5 Bright Light("SatyrLordRedMissile3")
	// 	{
	// 		A_StartSound("Exile/Resurrect",CHAN_6);
	// 		A_SpawnItem("PM_ExileRessurectFire", 55);
	// 	}
	// 	LMWZ F 5 Bright Light("SatyrLordRedMissile3");
	// 	LMWZ GGGG 5 Bright Light("SatyrLordRedMissile5");
	// 	Goto See;
	MasonHeal:
		LMWZ E 10 Bright Light("SatyrLordRedMissile3");
		LMWZ E 5 Bright Light("SatyrLordRedMissile3") masonRaise();
		LMWZ F 5 Bright Light("SatyrLordRedMissile3");
		LMWZ GGGG 5 Bright Light("SatyrLordRedMissile5");
		Goto See;
	Missile:
		TNT1 A 0 A_Jump(65, "SummonCritters", "Pod");
		TNT1 A 0 A_Jump(96, "Heart", "Rune");
	FleshBallBarrage:
		TNT1 A 0
			{
			pm_attackloop = random(3,24);
			}
		LMWZ FGH 5
		{
		A_Wander();
		A_FaceTarget();
		}
	BarrageContinue:
		LMWZ H random(1, 4)
		{
			if(!pm_attackloop)
			  { SetStateLabel("BarrageEnd"); }
			A_SpawnProjectile("PM_MasonBall", random(50,70), 0, frandom(-4, 4), CMF_AIMDIRECTION, pitch + frandom(-4, 4));
			A_Wander();
			A_FaceTarget();
		}
		TNT1 A 0
		{
		--pm_attackloop;
		}
		Loop;
	BarrageEnd:
		LMWZ HGF 4 A_FaceTarget(12,12);
		Goto See;
	Heart:
		LMWZ E 10 A_FaceTarget();
		LMW2 A 0 A_StartSound("CivZombie/MutationRip",15);
		LMW2 AAAAAAAAAA 2
		{
			A_FaceTarget();
			A_SpawnItemEx("PM_TumorBurstBlood",random(-5,5) + 8,random(-5,5),70,random(0,2),random(-2,2),random(0,2),0,SXF_NOCHECKPOSITION);
		}
		LMW2 BBBBBBBBBBB 1
		{
			A_FaceTarget();
			A_SpawnItemEx("PM_TumorBurstBlood",random(-5,5) + 8,random(-5,5),70,random(0,2),random(-2,2),random(0,2),0,SXF_NOCHECKPOSITION);
		}
		LMW2 B 30
		{
			A_StartSound("GBloodSplashBig",16, volume:.5);
			A_StartSound("ArachExpGore",17,CHANF_DEFAULT,0.5);
			A_StartSound("FleshMason/Heart",18, attenuation: 0.75);
			
			for (int i = random(10, 22); i > 0; i--) A_SpawnItemEx("PM_TumorBurstBlood",random(-5,5) + 8,random(-5,5),70,random(0,8),random(-8,8),random(0,8),0,SXF_NOCHECKPOSITION);
			for (int i = random(6, 2); i > 0; i--) A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-5,5) + 8,random(-5,5),70,random(0,4),random(-4,4),random(0,5),0,SXF_NOCHECKPOSITION);
			
			A_Facetarget();
			Radius_Quake(4, 10, 0, 10, 0);
			A_SpawnItemEx("PM_MasonHeart",0,0,65,random(2,6),random(-1,1),random(-1,1),random(-50,50),SXF_SETMASTER);
		}
		LMW2 A 10;
		Goto See;
	Rune:
		LMWZ E 10 A_FaceTarget();
		LMWZ F 0 A_StartSound("FleshMason/Grunt", CHAN_6);
		LMWZ F 0 A_VileTarget("PM_MasonRune");
		LMWZ EFGH 5
		{
			A_FaceTarget();
			Wiz2();
		}
		LMWZ HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH 1
		{
			A_FaceTarget();
			Wiz2();
		}
		LMWZ HGFE 5 Wiz2();
		Goto See;
	SummonCritters:
		LMWZ E 0 { if (summoncooldown > 0) SetStateLabel("FleshBallBarrage"); }
		LMWZ E 3 A_FaceTarget();
		LMWZ F 0 A_StartSound("FleshMason/Sight", CHAN_6);
		LMWZ EFGH 3
		{
			A_FaceTarget();
			Wiz();
		}
		LMWZ F 0 A_StartSound("FleshMason/Rune", CHAN_7, pitch: 0.75);
		LMWZ HHHHHHH random(0, 3) A_SpawnProjectile("PM_MasonSummon", 10, 0, frandom(0, 360), CMF_AIMDIRECTION);
		LMWZ E 0 { summoncooldown = random(200, 500); }
		LMWZ HHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH 1 Wiz();
		LMWZ HGFE 3 Wiz();
		Goto See;
	Pod:
		LMWZ E 0 { if (summoncooldown > 0) SetStateLabel("FleshBallBarrage"); }
		LMWZ E 5 A_FaceTarget();
		LMWZ F 0 A_StartSound("FleshMason/Active", CHAN_6);
		LMWZ EFGH 3
		{
			A_FaceTarget();
			Wiz2();
		}
		LMWZ H 0 A_SpawnProjectile("PM_MasonPod", 1);
		LMWZ E 0 { summoncooldown = random(100, 400); }
		LMWZ HHHHHHHHHHHHHHHHHHHHHHHHHHHHHH 1 Wiz2();
		LMWZ HGFE 3 Wiz2();
		Goto See;
	Dodge:
		LMWZ I 0 ThrustThing(random(0,128),random(5,25), 0, 0);
	    LMWZ AAAAAAAAAAAAAA 1  A_SpawnItemEx("PM_GenericPhaseGhost", zofs:6, flags: SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERSTENCILCOL);
		Goto See;
	Pain:
		LMWZ I 3;
		LMWZ I 1 { A_Stop(); A_Pain(); }
		LMWZ I 0;
		LMWZ I 0 A_Jump(128,"BloodPort","Dodge");
		LMWZ I 0 ThrustThing(random(0,128),random(2,22), 0, 0);
	    LMWZ IIIIIII 1  A_SpawnItemEx("PM_GenericPhaseGhost", zofs:6, flags: SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE|SXF_TRANSFERRENDERSTYLE|SXF_TRANSFERSTENCILCOL);
		Goto See;
	Death:
		LMWZ J 0 A_KillChildren("PM_MasonTainted");
		LMWZ J 0 A_KillChildren("PM_MasonPustule");
		LMWZ J 7
		{
		A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,50),0,0,0,0,SXF_NOCHECKPOSITION);
		A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,50),0,0,0,0,SXF_NOCHECKPOSITION);
		A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,50),0,0,0,0,SXF_NOCHECKPOSITION);
		A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,50),0,0,0,0,SXF_NOCHECKPOSITION);
		}
		LMWZ K 7
		{
		A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,50),0,0,0,0,SXF_NOCHECKPOSITION);
		A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,50),0,0,0,0,SXF_NOCHECKPOSITION);
		A_Scream();
		}
		LMWZ L 7
		{
		A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,40),0,0,0,0,SXF_NOCHECKPOSITION);
		A_NoBlocking();
		}
		LMWZ MN 7 A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,30),0,0,0,0,SXF_NOCHECKPOSITION);
		TNT1 A 0 A_StartSound("Corpse/FallMed",CHAN_6);
		LMWZ OP 7 A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,15),0,0,0,0,SXF_NOCHECKPOSITION);
		LMWZ P -1;
		Stop;
	}
}

Class PM_MasonBall : PM_BloodSpit
{
	int pm_masonballnum;
	Default
	{
		SeeSound "FleshMason/Fire";
		DeathSound "Enceinte/CumImpact";
		RenderStyle "Add";
		Speed 20;
		+NEVERFAST
		+SEEKERMISSILE
	}
	
	override void PostBeginPlay()
    {
     Super.PostBeginPlay();
     tex[0] = TexMan.CheckForTexture("GNSMK0",TexMan.Type_Sprite);
     tex[1] = TexMan.CheckForTexture("LENRA0",TexMan.Type_Sprite);
     tex[2] = TexMan.CheckForTexture("SPKRA0",TexMan.Type_Sprite);
    }
  
    TextureID tex[3];
  
	States
  	{
    Spawn:
		TNT1 A 0 A_ScaleVelocity(frandom(0.5,1.3));
		TNT1 A 0
			{
			pm_masonballnum = random(4,80);
			}
	Go:
		LMBW AABB 1 bright Light("ShadowBall2")
		{
		  if(!pm_masonballnum)
			  { SetStateLabel("Seeker"); }
		  vel.x += frandom(-1, 1);
		  vel.y += frandom(-1, 1);
		  vel.z += frandom(-1, 1);
		  if (!random(0, 2)) A_SpawnItemEx("MaliceBloodSplash",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,SXF_NOCHECKPOSITION);
		  A_SpawnItemEx("PM_BelphFlameTrails",random(-1,1),random(-1,1),0,0,0,0,0,128,0);
		  A_SpawnParticleEx("#890000",tex[0],style: STYLE_None,flags: SPF_ROLL|SPF_RELATIVE,lifetime: 30,size: 50.0,xoff: -10,startalphaf: 0.4,fadestepf: -1,sizestep: -2.45,startroll: random(-180,180));
		  A_SpawnParticleEx("ff0000",tex[2],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(1,70),size: frandom(0.2,10),xoff: random(-10,5),yoff: random(-5,5),zoff: random(-5,5),velx: frandom(-0.6,0.6),vely: frandom(-0.6,0.6),velz: frandom(-0.6,0.6),startalphaf: 1.0,fadestepf: -1,sizestep: -0.2,startroll: random(-180,180));
		  A_SpawnParticleEx("ff0000",tex[1],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT,lifetime: 1,size: 80.0,xoff: -5,startalphaf: 0.6);
		}
		TNT1 A 0
		{
		--pm_masonballnum;
		}
		Loop;
	Seeker:
		LMBW AABB 1 bright Light("ShadowBall2")
		{
		  if (!random(0, 2)) A_SpawnItemEx("MaliceBloodSplash",0,0,0,random(-1,1),random(-1,1),random(-1,1),0,SXF_NOCHECKPOSITION);
		  A_SpawnItemEx("PM_BelphFlameTrails",random(-1,1),random(-1,1),0,0,0,0,0,128,0);
		  A_SpawnParticleEx("#890000",tex[0],style: STYLE_None,flags: SPF_ROLL|SPF_RELATIVE,lifetime: 30,size: 50.0,xoff: -10,startalphaf: 0.4,fadestepf: -1,sizestep: -2.45,startroll: random(-180,180));
		  A_SpawnParticleEx("ff0000",tex[2],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(1,70),size: frandom(0.2,10),xoff: random(-10,5),yoff: random(-5,5),zoff: random(-5,5),velx: frandom(-0.6,0.6),vely: frandom(-0.6,0.6),velz: frandom(-0.6,0.6),startalphaf: 1.0,fadestepf: -1,sizestep: -0.2,startroll: random(-180,180));
		  A_SpawnParticleEx("ff0000",tex[1],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT,lifetime: 1,size: 80.0,xoff: -5,startalphaf: 0.6);
		  A_SeekerMissile(2,2);
		}
		Loop;
	Death:
		TNT1 A 0;
		TNT1 A 0 A_SetTranslation("PM_RedFireTint");
		TNT1 A 0 A_SetScale(1);
		TNT1 A 0 A_SpawnItemEx("PM_RFireBallExplode");
		TNT1 AA 0 A_SpawnParticleEx("",TexMan.CheckForTexture("DTPRR0"),style: STYLE_Add,flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL,lifetime: random(4,8),size: random(140,220),startalphaf: 0.95,fadestepf: -1,sizestep: -15,startroll: random(-180,180));
		TNT1 AAAAAA 0
		{
			A_SpawnItemEx("MaliceBloodSplash",0,0,0,random(-4,4),random(-4,4),random(1,10),0,SXF_NOCHECKPOSITION);
			A_SpawnParticleEx("",TexMan.CheckForTexture("SPKRA0"),style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(18,40),size: frandom(0.5,20),velx: frandom(-5,5),vely: frandom(-5,5),velz: frandom(-5,7),accelz: frandom(-0.0,-0.8),startalphaf: 1.0,fadestepf: -1,sizestep: -0.2,startroll: random(-180,180));
		}
		BFX5 D 2 Bright Light("Shadowball2");
		FIR3 CDEFGHIJKLMNOP 2 Bright Light("Shadowball2");
		stop;
	}
}

Class PM_MasonHeart : PM_BeholderEye
{
	Default
	{
		Health 120;
		Species "Archvile";
		SeeSound "FleshMason/Heart";
		DeathSound "FleshMason/HeartExplode";
		Tag "Mason Faux-Heart";
	}

	override void PostBeginPlay()
    {
     Super.PostBeginPlay();
     tex[0] = TexMan.CheckForTexture("GNSMK0",TexMan.Type_Sprite);
     tex[1] = TexMan.CheckForTexture("LENRA0",TexMan.Type_Sprite);
     tex[2] = TexMan.CheckForTexture("SPKRA0",TexMan.Type_Sprite);
    }
  
    TextureID tex[3];
	
	States
	{
		Spawn:
			HEE_ AAABBCCDDDAAABBCCDDDAAABBCCDDDAAABBCCDDDAAABBCCDDDAAABBCCDDDAAABBCCDDDAAABBCCDDD 1 Bright Light("ShadowBall2")
			{
				A_Recoil(-.6);
				vel.x += frandom(-.5, .5);
				vel.y += frandom(-.5, .5);
				vel.z += frandom(-.5, .5);
				vel *= .93;
				A_FaceTarget();
				if (!random(0, 12)) A_SpawnProjectile("PM_BloodSpit", 0, 0, frandom(0, 360), CMF_OFFSETPITCH, frandom(-90, 90));
				A_SpawnItemEx("MaliceBloodSplash",frandom(-20, 20),frandom(-20, 20),frandom(-20, 20),random(-1,1),random(-1,1),random(-1,1),0,SXF_NOCHECKPOSITION);
			}
			Goto Go;
		Go:	
			HEE_ AAABBCCDDD 1 Bright Light("ShadowBall2")
			{
				vel.x += frandom(-1, 1);
				vel.y += frandom(-1, 1);
				vel.z += frandom(-1, 1);
				vel *= .93;
				if (!random(0, 7)) A_SpawnProjectile("PM_BloodSpit", 0, 0, frandom(0, 360), CMF_OFFSETPITCH, frandom(-90, 90));
				A_SpawnItemEx("MaliceBloodSplash",frandom(-20, 20),frandom(-20, 20),frandom(-20, 20),random(-1,1),random(-1,1),random(-1,1),0,SXF_NOCHECKPOSITION);
			}
			TNT1 A 0 A_Jump(44,"Charge");
			Loop;
		Charge:
			HEE_ AAAAAAAAAAAAAA 2 Light("ShadowBall3") 
			{
				A_FaceTarget();
				vel *= .93;
				A_SpawnParticleEx("ff0000",tex[0],style: STYLE_Add,flags: SPF_ROLL|SPF_RELATIVE,lifetime: 120,size: 80.0,xoff: -10,startalphaf: 0.4,fadestepf: -1,startroll: random(-180,180));
				A_SpawnParticleEx("ff0000",tex[2],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(1,70),size: frandom(0.2,20),xoff: random(-10,5),yoff: random(-15,15),zoff: random(-15,15),velx: frandom(-0.6,0.6),vely: frandom(-0.6,0.6),velz: frandom(-0.6,0.6),startalphaf: 1.0,fadestepf: -1,sizestep: -0.2,startroll: random(-180,180));
				A_SpawnParticleEx("ff0000",tex[1],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT,lifetime: 1,size: 180.0,xoff: -5,startalphaf: 0.6);
			}
			BEYE A 0 A_SpawnProjectile("PM_MasonHeartAttack",0,0,0,CMF_TRACKOWNER);
			Stop;
		Bounce:
			TNT1 A 0 A_SpawnProjectile("RedGroundOoze",0,random(-6,6),random(-90,90));
			TNT1 A 0 A_SpawnProjectile("RedGroundOoze",0,random(-6,6),random(-90,90));
			Goto Spawn;
		Death:
			TNT1 A 0 A_SpawnItemEx("PM_TumorBloodMist",0,0,3,0,0,0,0,SXF_NOCHECKPOSITION);
			TNT1 AAAAAA 0 A_SpawnItemEx("PM_LargerBloodSplash",0,0,0,random(-7,7),random(-7,7),random(1,10),0,SXF_NOCHECKPOSITION);
			TNT1 AAAAAAA 0 A_SpawnItemEx("MaliceBloodSplash",0,0,0,random(-4,4),random(-4,4),random(1,10),0,SXF_NOCHECKPOSITION);
			TNT1 AAAAAA 0 A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,30),0,0,0,0,SXF_NOCHECKPOSITION);
			TNT1 A 0 A_SpawnItemEx("PM_RFireBallExplode");
			TNT1 AAAAAA 0 A_SpawnParticleEx("",TexMan.CheckForTexture("DTPRR0"),style: STYLE_Add,flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL,lifetime: random(4,8),size: random(140,220),startalphaf: 0.95,fadestepf: -1,sizestep: -15,startroll: random(-180,180));
			TNT1 AAAAAAAAAA 0 A_SpawnItemEx("RedGroundOoze",0,0,0,random(-8,8),random(-8,8),random(-8,8));
			TNT1 A 0 A_SpawnItemEx("RedGroundStain",0,0,0);
			BEYX ABC 4 Bright Light("ShadowBall2");
			Stop;
	}
}

Class PM_MasonHeartAttack : PM_BeholderEyeAttack
{
	Default
	{
		Speed 33;
		FastSpeed 40;
		DamageFunction 50;
		Radius 15;
		Height 15;
		Scale 1.1;
		Seesound "Grievance/Missile";
		DeathSound "FleshMason/HeartExplode";
	}
	
	override void PostBeginPlay()
    {
     Super.PostBeginPlay();
     tex[0] = TexMan.CheckForTexture("GNSMK0",TexMan.Type_Sprite);
     tex[1] = TexMan.CheckForTexture("LENRA0",TexMan.Type_Sprite);
     tex[2] = TexMan.CheckForTexture("SPKRA0",TexMan.Type_Sprite);
    }
  
    TextureID tex[3];
	
	States
	{
		Spawn:
			HEE_ AAABBCCDDD 1 Bright Light("ShadowBall2")
			{
				vel.x += frandom(-.1, .1);
				vel.y += frandom(-.1, .1);
				vel.z += frandom(-.1, .1);
				A_SpawnItemEx("MaliceBloodSplash",frandom(-20, 20),frandom(-20, 20),frandom(-20, 20),random(-1,1),random(-1,1),random(-1,1),0,SXF_NOCHECKPOSITION);
				A_SpawnItemEx("PM_BelphFlameTrails",random(-20,20),random(-20,20),0,0,0,0,0,128,0);
				A_SpawnParticleEx("ff0000",tex[0],style: STYLE_Add,flags: SPF_ROLL|SPF_RELATIVE,lifetime: 120,size: 80.0,xoff: -10,startalphaf: 0.4,fadestepf: -1,startroll: random(-180,180));
				A_SpawnParticleEx("ff0000",tex[2],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(1,70),size: frandom(0.2,20),xoff: random(-10,5),yoff: random(-15,15),zoff: random(-15,15),velx: frandom(-0.6,0.6),vely: frandom(-0.6,0.6),velz: frandom(-0.6,0.6),startalphaf: 1.0,fadestepf: -1,sizestep: -0.2,startroll: random(-180,180));
				A_SpawnParticleEx("ff0000",tex[1],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT,lifetime: 1,size: 180.0,xoff: -5,startalphaf: 0.6);
				A_SpawnItemEx("PM_BloodTrail", flags:SXF_NOCHECKPOSITION);
			}
			Loop;
		Death:
			TNT1 A 0 A_SpawnItemEx("PM_TumorBloodMist",0,0,3,0,0,0,0,SXF_NOCHECKPOSITION);
			TNT1 AAAAAA 0 A_SpawnItemEx("PM_LargerBloodSplash",0,0,0,random(-7,7),random(-7,7),random(1,10),0,SXF_NOCHECKPOSITION);
			TNT1 AAAAAAA 0 A_SpawnItemEx("MaliceBloodSplash",0,0,0,random(-4,4),random(-4,4),random(1,10),0,SXF_NOCHECKPOSITION);
			TNT1 AAAAAA 0 A_SpawnItemEx("PM_NormalMeatChunkLauncher",random(-2,2),random(-2,2),random(10,30),0,0,0,0,SXF_NOCHECKPOSITION);
			TNT1 AA 0 A_SpawnItemEx("PM_RFireBallExplode");
			TNT1 A 0 A_Explode(10, 160, XF_NOTMISSILE);
			TNT1 AAAAAA 0 A_SpawnParticleEx("",TexMan.CheckForTexture("DTPRR0"),style: STYLE_Add,flags: SPF_FULLBRIGHT|SPF_RELATIVE|SPF_ROLL,lifetime: random(4,8),size: random(140,220),startalphaf: 0.95,fadestepf: -1,sizestep: -15,startroll: random(-180,180));
			TNT1 AAAAAAAAAA 0 A_SpawnItemEx("RedGroundOoze",0,0,0,random(-8,8),random(-8,8),random(-8,8));
			TNT1 A 0 A_SpawnItemEx("RedGroundStain",0,0,0);
			BEYX ABC 4 Bright Light("ShadowBall2");
			Stop;
	}
}

Class PM_MasonRune : ArchvileFire
{
	Default
	{
		+FLATSPRITE
		RenderStyle "Normal";
		Translation "0:255=%[0,0,0]:[2.0,0.1,0.1]";
	}
	
	override void PostBeginPlay()
    {
     Super.PostBeginPlay();
     tex[0] = TexMan.CheckForTexture("GNSMK0",TexMan.Type_Sprite);
     tex[1] = TexMan.CheckForTexture("SPKRA0",TexMan.Type_Sprite);
	 angle = frandom(0, 360);
    }
  
    TextureID tex[2];
	
	void Rune()
	{
		A_SpawnParticleEx("ff0000",tex[0],style: STYLE_Add,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(80, 160),size: frandom(40, 80),xoff: random(-66, 66), yoff: random(-66, 66),velz: frandom(.3, 6),startalphaf: 0.2,fadestepf: -1,startroll: random(-180,180));
		A_SpawnParticleEx("ff0000",tex[0],style: STYLE_None,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(80, 160),size: frandom(40, 80),xoff: random(-66, 66), yoff: random(-66, 66),velz: frandom(.3, 6),startalphaf: 0.2,fadestepf: -1,startroll: random(-180,180));
		A_SpawnParticleEx("",tex[1],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(1,70),size: frandom(0.2,10),xoff: random(-70, 70),yoff: random(-70,70),zoff: random(-5,5),velx: frandom(-0.6,0.6),vely: frandom(-0.6,0.6),velz: frandom(1,7),startalphaf: 1.0,fadestepf: -1,sizestep: -0.2,startroll: random(-180,180));
	}
	
	States
	{
	Spawn:
		C1TE A 0 NoDelay A_StartSound("FleshMason/Rune",10);
		C1TE AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 Bright
		{
		A_Fire();
		Rune();
		angle += 5;
		}
		C1TE AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 Bright
		{
		A_Fire();
		for (int i = random(2, 3); i > 0; i--) Rune();
		angle += 15;
		}
		C1TE AAAAAAAAAAA 1 Bright
		{
		for (int i = random(2, 3); i > 0; i--) Rune();
		angle += 15;
		}
		Goto Burst;
	Burst:
		C1TE A 0
		{
			A_Explode((60), 90, XF_NOTMISSILE);
			A_StartSound("FleshMason/RuneExplode");
		}
		C1TE AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 Bright
		{
		for (int i = random(2, 3); i > 0; i--) Rune();
		angle += 15;
		if (!(GetAge() % 2)) A_SpawnItemEx("PM_TaintedDeathSplash",random(-40,40),random(-40,40),0,0,0,random(3,6));
		A_SpawnItemEx("PM_MasonGeyser", frandom(-5, 5), frandom(-5, 5), frandom(-5, 5) + 15, frandom(-2, 2), frandom(-2, 2), frandom(6, 12), 0, SXF_NOCHECKPOSITION);
		}
		C1TE A 1 Bright
		{
		angle += 5;
		A_FadeOut(0.01);
		}
		Wait;
	}
}

Class PM_MasonPortGeyser : ArchvileFire
{
	Default
	{
		+FLATSPRITE
		RenderStyle "Normal";
		Translation "0:255=%[0,0,0]:[2.0,0.1,0.1]";
	}
	
	override void PostBeginPlay()
    {
     Super.PostBeginPlay();
     tex[0] = TexMan.CheckForTexture("GNSMK0",TexMan.Type_Sprite);
     tex[1] = TexMan.CheckForTexture("SPKRA0",TexMan.Type_Sprite);
	 angle = frandom(0, 360);
    }
  
    TextureID tex[2];
	
	void Rune()
	{
		A_SpawnParticleEx("ff0000",tex[0],style: STYLE_Add,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(80, 160),size: frandom(40, 80),xoff: random(-66, 66), yoff: random(-66, 66),velz: frandom(.3, 6),startalphaf: 0.2,fadestepf: -1,startroll: random(-180,180));
		A_SpawnParticleEx("ff0000",tex[0],style: STYLE_None,flags: SPF_ROLL|SPF_RELATIVE,lifetime: random(80, 160),size: frandom(40, 80),xoff: random(-66, 66), yoff: random(-66, 66),velz: frandom(.3, 6),startalphaf: 0.2,fadestepf: -1,startroll: random(-180,180));
		A_SpawnParticleEx("",tex[1],style: STYLE_Add,flags: SPF_RELATIVE|SPF_FULLBRIGHT|SPF_ROLL,lifetime: random(1,70),size: frandom(0.2,10),xoff: random(-70, 70),yoff: random(-70,70),zoff: random(-5,5),velx: frandom(-0.6,0.6),vely: frandom(-0.6,0.6),velz: frandom(1,7),startalphaf: 1.0,fadestepf: -1,sizestep: -0.2,startroll: random(-180,180));
	}
	
	States
	{
	Spawn:
		C1TE A 0
		{
			A_StartSound("FleshMason/RuneExplode");
		}
		C1TE AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 1 Bright
		{
		for (int i = random(2, 3); i > 0; i--) Rune();
		angle += 15;
		if (!(GetAge() % 2)) A_SpawnItemEx("PM_TaintedDeathSplash",random(-40,40),random(-40,40),0,0,0,random(3,6));
		A_SpawnItemEx("PM_MasonGeyser", frandom(-5, 5), frandom(-5, 5), frandom(-5, 5) + 15, frandom(-2, 2), frandom(-2, 2), frandom(6, 12), 0, SXF_NOCHECKPOSITION);
		}
		C1TE A 1 Bright
		{
		angle += 5;
		A_FadeOut(0.5);
		}
		Wait;
	}
}

Class PM_MasonGeyser : PM_BloodSpit
{
	Default
	{
		SeeSound "";
		DeathSound "";
		DamageFunction 5;
		-NOGRAVITY
		+CLIENTSIDEONLY
		Gravity .5;
		Scale 1.75;
	}
	
	States
	{
	Spawn:
		TNT1 A 0 NoDelay A_SetRoll(random(0,360));
		TNT1 A 0 A_Jump(256,"Splash1","Splash2","Splash3");
	Splash1:
		X057 ABCDEFGHIJKLMNOPQRS 1;
		Stop;
	Splash2:
		X058 ABCDEFGHIJKLMNOPQR 1;
		Stop;
	Splash3:
		X059 ABCDEFGHIJKLM 1;
		Stop;
	}
}

Class PM_MasonPod : PM_MasonHeart
{
  Default
  {
  Speed 40;
  -NOGRAVITY
  +FLOORHUGGER
  -SHOOTABLE
  Tag "Mason Flesh Pod";
  Health 150;
  }
  
  States
  {
  Spawn:
   TNT1 A 0;
   TNT1 AAAAAAAAAAA random(1,5) A_Chase();
   Goto Go;
  Go:
   TNT1 A random(10, 60);
   TNT1 A 0 { bSHOOTABLE = true; A_StartSound("Mimic/Pain"); }
   SK_N BBBBBBBBBBBBBBAAAAAAAAAAAAA 1 A_SpawnItemEx("PM_TumorBurstBlood", frandom(-10, 10), frandom(-10, 10), frandom(-10, 10), frandom(-3, 3), frandom(-3, 3), frandom(2, 5), flags: SXF_NOCHECKPOSITION);
   SK_N A random(10, 40);
   SK_N AAAA random(5, 20)
   {
	A_StartSound("Blob/Explode", pitch: frandom(1.4, 1.5));
	for (int i = 5; i > 0; i--) A_SpawnItemEX("PM_TumorBurstBlood", 0, 0, 0, random (4, 15), random(4,15), random (4, 15), random(0, 360),SXF_NOCHECKPOSITION);
	A_SpawnItemEx("PM_MasonPustule",0,0,10,frandom(-4, 4), frandom(-4, 4), frandom(10, 22),flags:SXF_NOCHECKPOSITION|SXF_SETMASTER);
   }
   SK_N A 0 A_StartSound("Mimic/Pain");
   SK_N AAAAAAAAAAAAAAABBBBBBBBBBBB 1 A_SpawnItemEx("PM_TumorBurstBlood", frandom(-10, 10), frandom(-10, 10), frandom(-10, 10), frandom(-3, 3), frandom(-3, 3), frandom(2, 5), flags: SXF_NOCHECKPOSITION);
	Stop;
  }
}

Class PM_MasonSummon : PM_ExaltedCultSummon
{
  Default
  {
  Speed 12;
  }
  
  States
  {
  Spawn:
   TNT1 A 0;
   TNT1 AAAAA random(1,5);
  Go:
   TNT1 A random(10, 60) A_ScaleVelocity(0);
   TNT1 AAAAAAAAAAAAAAAAAAAAA 1
   {
		A_SpawnItemEx("PM_TumorBurstBlood", frandom(-10, 10), frandom(-10, 10), frandom(-10, 10), frandom(-3, 3), frandom(-3, 3), frandom(2, 5), flags: SXF_NOCHECKPOSITION);
		A_FaceTracer();
   }
	TNT1 A 2 A_StartSound("Blob/Explode");
	TNT1 A 0 A_SpawnItemEx("PM_TumorBloodMist",0,0,3,0,0,0,0,SXF_NOCHECKPOSITION);
	TNT1 AAAAAAAAAAAAAAA 0 A_SpawnItemEX("PM_TumorBurstBlood", 0, 0, 0, random (4, 15), random(4,15), random (4, 15), random(0, 360),SXF_NOCHECKPOSITION);
	TNT1 A 0 A_SpawnItemEx((!random(0, 2)) ? "PM_MasonPustule" : "PM_MasonTainted",zofs:10,flags:SXF_NOCHECKPOSITION|SXF_SETMASTER);
	Stop;
  }
}

Class PM_MasonTainted : PM_Tainted
{
	Default
	{
		Tag "Regurgitated Tainted";
		Health 60;
		-COUNTKILL
		+THRUSPECIES
		Species "Archvile";
		PMMonsterBase.CodexLore "";
		+MISSILEEVENMORE
		+NOINFIGHTING
	}
	
	int timer;
	bool ded;
	
	override void Tick()
	{
		super.Tick();
		
		if (!isFrozen() && health > 0 && ++timer >= 400 && !ded) { ded = true; A_Die(); SetStateLabel("Death"); }
	}
	
	States
	{
	Spawn:
		BZRD N 4 A_LookEx(label: "Spotted");
    Spotted:
	    BZRD NNNN 3 A_Chase(null,null,CHF_NOPLAYACTIVE);
		BZRD NOPQ 3 A_FaceTarget();
        TNT1 A 0
		{
		  bSolid = true;
		  bShootable = true;
		}
        BZRD RST 3 A_FaceTarget();
		Goto Spotted2;
	Death:
        BZRD I 12;
        BZRD J 3;
		BZRD J 6 PM_Scream;
        BZRD K 8;
        BZRD L 6 A_NoBlocking;
        BZRD L 0;
        BZRD M 2;
		TNT1 A 0 A_StartSound("GBloodSplashBig",CHAN_6);
		TNT1 A 0 A_SpawnItemEx("PM_TumorBloodMist",0,0,3,0,0,0,0,SXF_NOCHECKPOSITION);
		TNT1 AAAAAAA 0 A_SpawnItemEx("RedGroundOoze",random(-7,7),random(-7,7),1,random(-5,5),random(-5,5),random(-0,3),0,SXF_NOCHECKPOSITION);
		TNT1 AAAAAAAA 0 A_SpawnItemEX("PM_TaintedDeathSplash", 0, 0, 0, random (1, 3), random(1,3), random (1, 6), random(0, 360),SXF_NOCHECKPOSITION);
		TNT1 AAAAAAAAAAAAAAA 0 A_SpawnItemEX("PM_TumorBurstBlood", 0, 0, 0, random (-15, 15), random(-15,15), random (1, 7),0,SXF_NOCHECKPOSITION);
		BZRD NNNNNNNNNNNNNN 4 A_SpawnItemEx("PM_TumorBurstBlood",random(-40,40),random(-40,40),0,random(-4,4),random(-4,4),random(0,5),0,SXF_NOCHECKPOSITION);
        Stop;
	XDeath:
	    TNT1 A 0 A_StopSound(555);
		BZRD N 5 PM_Gib();
		BZRD N 5 A_XScream;
		BZRD N 1 A_NoBlocking;
        Stop;
	}
}

Class PM_MasonPustule : Pustule
{
  default {
	PMMonsterBase.CodexLore "";
    Obituary "%o was popped by a Flesh Mason's living gore mass.";
    Health 75;
    Speed 5;
    Meleerange 65;
    Tag "Gore Mass";
    Species "Archvile";
	+NOINFIGHTING
	+THRUSPECIES
  }
  int timer;
  bool ded;
  
  override void Tick()
  {
	super.Tick();
	
	if (!isFrozen() && health > 0 && ++timer >= 400 && !ded) { ded = true; setStateLabel("Melee"); }
  }
  
  override void PostBeginPlay()
  {
	super.PostBeginPlay();
	scale.x = frandom(0.5, 0.75);
	scale.y = scale.x;
  }
  
  states
  {
    Spawn:
      FLO2 GGGG 3 A_Wander();
	  TNT1 A 0 A_Look();
	  FLO2 BBBB 3 A_Wander();
	  TNT1 A 0 A_Look();
	  FLO2 CCCC 3 A_Wander();
	  TNT1 A 0 A_Look();
	  FLO2 BBBB 3 A_Wander();
	  TNT1 A 0 A_Look();
      loop;
    See:
	  TNT1 A 0;
      TNT1 A 0 A_SetRoll(0,SPF_INTERPOLATE);
      FLO2 GGGGBBBBCCCCBBBB random(2, 4)
	  {
		A_Recoil(-0.15);
		A_Chase();
	  }
	  TNT1 A 0 A_Jump(140,"Yuck");
	  TNT1 A 0 A_Jump(50,"CeilingJump");
	  TNT1 A 0 A_Jump(90,"Flop","SlideForward","SlideBack","SlideLeft","SlideRight");
      loop;

    CeilingJump:
  	  TNT1 A 0 A_JumpIf(CallACS("GetActorZDist") <= 80, 2);
	  TNT1 AAA 0;
	  TNT1 A 0 A_JumpIf(CallACS("IsThisSky") == 1, "See");
      FLO2 DE 4;
	  TNT1 A 0 ThrustThingZ(0,60,0,1) ;
	  //TNT1 A 0 A_PlaySound("MAMAMIA")	//I will always remember you. F
	  FLO2 EEEE 2 A_CheckCeiling("CeilingLatch");
	  TNT1 A 0 ThrustThingZ(0,45,0,1);
	  TNT1 A 0 A_SetRoll(180,SPF_INTERPOLATE);
	  FLO2 FFF 2 A_CheckCeiling("CeilingLatch");
	  TNT1 A 0 ThrustThingZ(0,45,0,1);
	  FLO2 EEEE 3 A_CheckCeiling("CeilingLatch");
	  FLO2 EEEEEEE 3 A_CheckFloor("See");
	  TNT1 A 0 A_SetRoll(180,SPF_INTERPOLATE);
	  Goto See;

  	CeilingLatch:
      TNT1 A 0
	  {
	  bNOGRAVITY = true;
	  bTHRUSPECIES = true;
	  bNOVERTICALMELEERANGE = true; 
	  }
	  //TNT1 A 0 A_ChangeFlag("CEILINGHUGGER", 1)
	  TNT1 A 0 {isOnCeiling = true;} 
      FLO2 EEDDD 3 ThrustThingZ(0,500,0,1); //1;
	  Goto CeilingCrawl;

  	CeilingCrawl:
      TNT1 A 0 A_SetRoll(180,SPF_INTERPOLATE);
	  TNT1 A 0 A_JumpIf(CallACS("IsThisSky") == 1, "CeilingPounce");
	  TNT1 A 0 A_JumpIf(vel.z > 250,"CeilingPounce");
	  TNT1 A 0 A_CheckFloor("CeilingDrop");
	  TNT1 A 0 ThrustThingZ(0,500,0,1);
	  FLO2 CCCCCCCBBBBBBB 2 A_Chase(null,null,CHF_NOPLAYACTIVE);
	  TNT1 A 0 A_Recoil(-0.05);
	  TNT1 A 0 ThrustThingZ(0,500,0,1);
	  TNT1 A 0 A_JumpIf(vel.z > 250, "CeilingPounce");
      TNT1 A 0 A_CheckFloor("CeilingDrop");
	  TNT1 A 0 ThrustThingZ(0,500,0,1);
	  TNT1 A 0 A_JumpIf(CallACS("IsThisSky") == 1, "CeilingPounce");
	  TNT1 A 0 A_JumpIf(vel.z > 250, "CeilingPounce");
	  TNT1 A 0 A_CheckFloor("CeilingDrop");
	  TNT1 A 0 A_JumpIfCloser(50,"CeilingStrike",True);
	  TNT1 A 0 A_Jump(5,"CeilingDrop");
	  Loop;
		
     CeilingStrike:
	  TNT1 A 0;
	  FLO2 BBB 5 A_SpawnItemEx("SkullBloodDrip",random(-6,6),random(-6,6),0,0,0,0,0,0);
	  TNT1 A 0 A_StartSound("PUSWAL");
	  FLO2 BBB 1;
	  TNT1 A 0 {isOnCeiling=false;}
	  TNT1 A 0 
	  {
	  bNOGRAVITY = false;
	  bCEILINGHUGGER =  false;
	  }
	  FLO2 G 2 A_FaceTarget();
	  TNT1 A 0 A_SetRoll(0,SPF_INTERPOLATE);
	  Goto CeilingDropping;
		
	CeilingDrop:
	  TNT1 A 0;
	  TNT1 A 0 {isOnCeiling=false;}
	  TNT1 A 0 
	  {
	  bNOGRAVITY = false;
	  bCEILINGHUGGER =  false;
	  }
	  FLO2 G 2 A_Face(target);
	  TNT1 A 0 A_SetRoll(0,SPF_INTERPOLATE);
	CeilingDropping:
	  FLO2 DD 1 A_JumpIf (vel.z == 0, "CeilingLanding");
	  loop;
	CeilingLanding:
	  TNT1 A 0 A_StartSound("Blob/Slosh");
	  FLO2 BBBBBB 0 A_SpawnItemEx("MaliceBloodSplash",2,0,0,random(2,6),random(-2,2),random(-2,7));
	  TNT1 A 0 A_SetRoll(0,SPF_INTERPOLATE);
	  FLO2 BBBB 3 A_Face(target);
	  Goto See;
		
	CeilingPounce: 
	  TNT1 AAA 0;
	  TNT1 A 0 {isOnCeiling=true;}
	  TNT1 A 0 
	  {
	  bNOGRAVITY = false;
	  bCEILINGHUGGER = false;
	  bTHRUSPECIES = false;
	  }
	  TNT1 A 0 A_Recoil (-18);
	  TNT1 A 0 A_Face(target);
	  FLO2 BBCC 2;
	  TNT1 A 0 A_SetRoll(0,SPF_INTERPOLATE);
	  FLO2 GGBB 2;
	  Goto CeilingDropping;		

    Yuck:
	  TNT1 A 0 A_StartSound("PUSWAL");
	  Goto See;
	Missile:
    Flop:
	  FLO2 B 5 A_FaceTarget();
	  FLO2 A 0 A_Recoil(-9);
	  TNT1 A 0 ThrustThingZ(0,32,0,1);
	  FLO2 A 17;
	  TNT1 A 0 A_StartSound("Blob/Slosh");
	  FLO2 BBB 1 A_SpawnItemEx("MaliceBloodSplash",2,0,0,random(2,6),random(-2,2),random(-2,7));
	  FLO2 B 8;
	  Goto See;
    SlideForward:
	  TNT1 A 0 ThrustThingZ(0,5,0,1);
	  FLO2 A 0 A_Recoil(-14);
	  TNT1 A 0 A_StartSound("Blob/Slosh");
	  FLO2 B 20;
	  Goto See;
    SlideBack:
	  TNT1 A 0 ThrustThingZ(0,5,0,1);
	  FLO2 A 0 A_Recoil(14);
	  TNT1 A 0 A_StartSound("Blob/Slosh");
	  FLO2 B 20;
	  Goto See;
    SlideLeft:
	  TNT1 A 0 ThrustThingZ(0,5,0,1);
	  FLO2 A 0 ThrustThing( int(ceil(angle*256/360 +64)), 12, 0, 0);
	  TNT1 A 0 A_StartSound("Blob/Slosh");
	  FLO2 B 20;
	  Goto See;
    SlideRight:
	  TNT1 A 0 ThrustThingZ(0,5,0,1);
	  FLO2 A 0 ThrustThing( int(ceil(angle*256/360 +192)) , 12, 0, 0);
	  TNT1 A 0 A_StartSound("Blob/Slosh");
	  FLO2 B 20;
	  Goto See;
    Pain:
	  TNT1 A 0;
	  TNT1 A 0 A_SetRoll(0,SPF_INTERPOLATE);
	  TNT1 A 0 { bNOGRAVITY = false; }
      FLO2 A 1 A_Pain;
      FLO2 A 8;
	  TNT1 A 0 A_Jump(150,"Flop","SlideForward","SlideBack","SlideLeft","SlideRight","CeilingJump");
      goto See;
    Melee:
	  TNT1 A 0 { bNOPAIN = true; }
	  FLO2 A 0 A_StartSound("blob/active");
	  FLO2 GGBBCCBBGGB 1
	  {
	    A_SetScale(Scale.X+0.04);
	    A_SpawnItemEx("MaliceBloodSplash",random(-5,5),random(-5,5),random(-5,5),random(2,6),random(-2,2),random(-2,7),0,SXF_NOCHECKPOSITION);
	  }
      FLO2 A 0 A_Die();
    Death:
      FLO2 F 2 A_StartSound("Blob/Explode");
	  TNT1 A 0 A_SpawnItemEx("PM_TumorBloodMist",0,0,3,0,0,0,0,SXF_NOCHECKPOSITION);
      FLO2 F 0 A_SpawnItem("PustuleDamage");
      FLO2 FFFFFFFFFFFFFFFFFFFFFFFF 0 A_SpawnItemEX("PM_TumorBurstBlood", 0, 0, 0, random (4, 15), random(4,15), random (4, 15), random(0, 360),SXF_NOCHECKPOSITION);
	  FLO2 FFFFFF 0 A_SpawnItemEX("PM_NormalMeatChunkLauncher", 0, 0, 0, random (4, 15), random(4,15), random (4, 15), random(0, 360),SXF_NOCHECKPOSITION,70);
      FLO2 GH 2;
      stop;
  }
}