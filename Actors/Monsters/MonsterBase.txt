class PMMonsterBase : Actor abstract
{
	override void Tick()
	{
		if (Height != RealHeight && RealHeight > 0)
		{
			A_SetSize(-1, RealHeight, true);
		}

		// [Ace] If you load DS before PM, you can use the helper stuff from DS for debugging. Just don't forget to comment out the code later.
		//DSCore.DrawCollisionBox(self);
		Super.Tick();
	}

	// [Ace] If there is enough space, monsters will readjust their height so the collision box matches their sprite.
	// However, the initial size needs to be small so monsters placed in wall holes (e.g. Cacodemons on Tricks and Traps) can leave.
	protected meta int RealHeight;
	property RealHeight: RealHeight;

  default
  {
    Monster;
    +FLOORCLIP;
  }

	protected action void A_Aim()
	{
		A_FaceTarget(0, 0);
		invoker.OldAim = (Angle, Pitch);
	}

	protected action void A_LeadTarget(double projSpeed)
	{
		if (!Target)
		{
			return;
		}

		A_FaceTarget(0, 0);
		double ticsToTarget = Distance3D(Target) / projSpeed;

		vector2 newAim = (DeltaAngle(invoker.OldAim.x, Angle), DeltaAngle(invoker.OldAim.y, Pitch));

		// [Ace] The target's position changed abruptly, such as teleporting behind the enemy.
		if (abs(newAim.x) > 45)
		{
			return;
		}

		newAim *= ticsToTarget;

		Angle = invoker.OldAim.x + newAim.x;
		Pitch = invoker.OldAim.y + newAim.y;
	}

	private Vector2 OldAim;
    
    void PM_Look()
    {
     A_LookEx(LOF_NOSEESOUND, label: "Look");
    }
 
    void PM_LookingForPlayer()
    {
     A_Chase(null, "Spotted", CHF_NOPLAYACTIVE);
    }
 
    void PM_AlertSound()
    {
     A_StartSound(SeeSound, 0, attenuation: (!bBOSS) ? 1 : 0);
    }
	
	void PM_DeathPhase()
    {
     A_Wander();
     A_SpawnItemEx("PM_GenericPhaseGhost",0,0,0,0,0,0,0,SXF_TRANSFERSPRITEFRAME|SXF_TRANSFERSCALE);
    }
}